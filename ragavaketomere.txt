DONE login&register password change
DONE setup profile
DONE profile features about images

DONE vamateb searchs iuzerebsitvis

DONE mokled movrchi send friend request da notifications

DONE avamushavo buttonebi damateba da darejecteba ratqmunda notificationebit

DONE megobrebis washla, notificationebeis washla batonze klikit

DONE shevamowmo yvelaferi user damateba, requestis gagzavna, notification, washla megobris, notification washla, decline request,

DONE davamato profilze megorebic da davqesho barem optimizacia gavuketo profile pages

DONE search friends listshi ra


DONE eseigi vamateb posts jerjerobit marto davamatot da profilze gamovachinot

DONE eseigi posti emateba chveulebrivad aseve ematebe user mediashi url

DONE exla ro moval avamushaveb likes da comments

DONE da uechveli davamateb imas ro fotoebi da videoebi davaoptimiziro ra

DONE postis update

Done eseigi potos validacia da shemdeg ukve davaabdeiteb posts mere davamateb likes da comments

DONE eseigi comentarebi iwereba, notifications mushaobs, ishleba, edit.

DONE shemdegi aris share function

DONE mokled zusti taskebi xvalistvis aris gaziarebuli postis dalaiqeba, komentari da davamateb ro wavshalo komentari an davaedito mashin roca daamata iuzerma egreve

DONE sheedzlos users tavisi tagebis shecvla

DONE eseni iqneba xvalindeli taskebi da mere daviwyeb shemowmebas yvelaferis sanam gadaval for youze

KARGIA core
KARGIA users
KARGIA user_profile
KARGIA posts
KARGIA notifications
KARGIA friendship
KARGIA mainApp

DONE eseigi main apshi unda gavaketo profileshi scroll based pagination postebistvis

DONE eseigi xvalistvis aris ro anu pirvel rigshi roca vsqrolavt profileze postze unda davamatot share da like unda gavasworot!!!!!!!


DONE gavaketo for you.

DONE eseigi profilze shevcvale is ro userma posti washalos da edit anu roca axlebi emateba mashin!!!!

DONE da for you dawyebulia, dasamatebelia is comment da like, mere davamatot gaziarebuli postebi

DONE for youze postis redaqtireba washla shegidzlia

DONE eseigi shared postebi aris, like comment aris, share aris.
DONE roca iuzeri posts aziarebs midis mesiji postis patrons

KARGIA gavtestav roca users megobrebi ar yavs rogor iqneba for you.

DONE moval pagination da egaa.

DONE eseigi profilze ro sqrolavs da orjer ro laikdeba posti magas gavasworeb, davamateb imas ro kontainerze daklikebit DONE mivigo elementi ra rogorc sxvebia ise postActions gavasworeb mere aireva ragacebi wesit mara egenic unda gavasworo


DONE messages


DONE eseigi roca davaklikebt users unda gavgzavnot request chatistvis, avigebt current users da imas visac unda
ro miweros, mere shevamowmeb tu aris chati avigeb mesijebs tu arada gavgzavni ukan mesijs rom daiwyos userma conversation

DONE eseigi shemdegi aris ro gavgzavnot ukve mesiji, da amis mere ucbad mivamateb imasac ro mesiji waishalos da errorebs 

DONE notification meijebze

DONE eseigi davamato celery saitze

/////////////////////////////// DONE //////////////////////////////////////
2. Profiles & Friendships
Goal: Let users create profiles and manage friendships.

Step 1: Extend the User model to include fields like bio, location, profile picture, job, and background image (you’re already doing this).
Step 2: Create a ‘friendship’ model to handle friend requests. Fields include sender, receiver, status (pending, accepted).
Step 3: Develop views and AJAX endpoints for sending/accepting friend requests.
Step 4: Build a ‘Friends’ section on the user profile to list confirmed friends.

/////////////////////////////// DONE //////////////////////////////////////

/////////////////////////////// DONE //////////////////////////////////////
3. Posts & News Feed
Goal: Allow users to create posts and view a personalized news feed.

Step 1: Create a Post model with fields like author, content, created_at, and media.
Step 2: Implement the UI for creating a post. Allow text, image, and video uploads.
Step 3: Build a News Feed page that fetches posts from the user’s friends in chronological order.
Step 4: Implement pagination or infinite scroll for performance.

4. Likes, Comments, and Reactions
Goal: Let users engage with posts through likes, comments, and reactions.

Step 1: Create a Like model linked to Post and User.
Step 2: Add a Comment model with post, user, content, and created_at fields.
Step 3: Implement AJAX for adding likes, comments, and reactions dynamically without reloading the page.
Step 4: Design a variety of reactions (like Facebook's emojis) if you want more than simple likes.
/////////////////////////////// DONE //////////////////////////////////////

/////////////////////////////// DONE //////////////////////////////////////
5. Real-time Communication
Goal: Enable messaging and real-time notifications.

Step 1: Set up Django Channels for WebSocket support.
Step 2: Create a Message model to store private conversations between users.
Step 3: Build a simple chat UI using WebSockets to push and receive messages instantly.
Step 4: Implement real-time notifications for friend requests, messages, and reactions using WebSockets.
/////////////////////////////// DONE //////////////////////////////////////

/////////////////////////////// DONE //////////////////////////////////////
6. Search Functionality
Goal: Let users search for friends, posts, and other content.

Step 1: Implement a basic search view using Django’s search and full-text search.
Step 2: Create a search bar in the UI and display results for users, posts, or groups.
Step 3: Use pagination to display large sets of results efficiently.
/////////////////////////////// DONE //////////////////////////////////////

/////////////////////////////// DONE //////////////////////////////////////
7. Media Handling
Goal: Enable users to upload images, videos, and other media.

Step 1: Add media fields to your Post model to support file uploads.
Step 2: Configure Django to store and serve media files (ensure correct media root setup).
Step 3: Add functionality to preview media uploads on the client side using JavaScript.
Step 4: Implement image compression and video thumbnail generation to optimize media handling.
/////////////////////////////// DONE //////////////////////////////////////

8. Privacy Settings
Goal: Give users control over who can see their posts and profiles.

Step 1: Add privacy options to the user profile (e.g., ‘Public’, ‘Friends Only’, ‘Private’).
Step 2: Implement privacy settings on posts, allowing users to choose visibility.
Step 3: Modify your views and queries to respect privacy settings before displaying data.

/////////////////////////////// DONE //////////////////////////////////////
9. Notifications
Goal: Notify users of new interactions such as friend requests, likes, or messages.

Step 1: Create a Notification model with fields like user, event_type, trigger_user, is_read.
Step 2: Develop real-time notification logic using Django Channels.
Step 3: Add a notification icon to the UI that updates in real time.
/////////////////////////////// DONE //////////////////////////////////////

10. Groups & Events
Goal: Enable users to create and join groups or events.

Step 1: Create Group and Event models with fields for name, description, admin, and members.
Step 2: Add views for creating, joining, and managing groups and events.
Step 3: Show a feed for group posts similar to the regular news feed.


11. Scalability & Performance
Goal: Ensure your application can scale effectively.

Step 1: Implement caching (e.g., Redis) to reduce database queries on frequently accessed pages.
Step 2: Use asynchronous task queues like Celery to handle background jobs (e.g., notifications, media processing).
Step 3: Optimize database queries (e.g., using select_related and indexing on frequently queried fields).
Step 4: Set up load balancing and multiple servers to handle a large number of concurrent users.